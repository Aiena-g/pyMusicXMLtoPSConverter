#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Sep 16, 2017 11:10:01 PM
import sys

try:
    from Tkinter import *
    from Tkinter import filedialog as tkfd
    import Tkinter.scrolledtext as tkst
    import subprocess
except ImportError:
    from tkinter import *
    from tkinter import filedialog as tkfd
    import tkinter.scrolledtext as tkst

    import subprocess
    import os

try:
    import ttk

    py3 = 0
except ImportError:
    import tkinter.ttk as ttk

    py3 = 1

# local imports
import ConverterUI_support
from MusicXMLConverter import MusicXMLConverter


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    oMusicXMLConverter = MusicXMLConverter(mode="production")
    top = Musescore_Music_XML_to_PlaneShift_XML_Converter(root, converter=oMusicXMLConverter)
    ConverterUI_support.init(root, top)
    root.mainloop()


w = None


def create_Musescore_Music_XML_to_PlaneShift_XML_Converter(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = Musescore_Music_XML_to_PlaneShift_XML_Converter(w)
    ConverterUI_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Musescore_Music_XML_to_PlaneShift_XML_Converter():
    global w
    w.destroy()
    w = None


class Musescore_Music_XML_to_PlaneShift_XML_Converter:
    def __init__(self, top=None, converter=None):
        if (converter is None):
            raise Exception("Please specifiy a converter")
        else:
            self._converter = converter

        #define the configfile path
        scriptPath = os.path.dirname(os.path.abspath(__file__))
        #TODO: Make the confighandler class and pass the config file path obtained here there
        self._confFilePath = os.path.join(os.path.dirname(os.path.normpath(scriptPath)),"conf","conf.ini")
        print (self._confFilePath) # TODO: remove this print -- debug only path seems to work ok
        # DEFINE SOME USEFUL VARIABLES FOR THE APPLICATION
        '''
        NOTE:
        Please use absolute paths for these No "./path/foo/" OR "~/path/foo/" or just "foo"
        '''
        # the directory where you keep your scores in XML exported from musescore
        self.MusecoreScoresFolder = "/home/aiena/Documents/MuseScore2/Scores/"
        # the directory where you waqnt to export the PS converted XML scores (usually .PlaneShift)
        self.PlaneShiftScoresFolder = "/home/aiena/.PlaneShift/musicalsheets/"

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'

        top.geometry("577x681+648+0")
        top.title("Musescore -> Planeshift -- Music XML Converter")

        font11 = "-family Arial -size 10 -weight bold -slant roman " \
                 "-underline 0 -overstrike 0"
        font9 = "-family Arial -size -12 -weight normal -slant roman " \
                "-underline 0 -overstrike 0"

        # configure section controls
        self.lblTitlConfigure = Label(top)
        self.lblTitlConfigure.place(relx=0.03, rely=0.0, height=28, width=225)
        self.lblTitlConfigure.configure(activebackground="#f9f9f9")
        self.lblTitlConfigure.configure(anchor=W)
        self.lblTitlConfigure.configure(font=font11)
        self.lblTitlConfigure.configure(text='''Configure:''')

        self.MCXMLSrcFldr = Entry(top)
        self.MCXMLSrcFldr.place(relx=0.03, rely=0.09, relheight=0.06
                                , relwidth=0.67)
        self.MCXMLSrcFldr.configure(background="white")
        self.MCXMLSrcFldr.configure(font="TkFixedFont")
        self.MCXMLSrcFldr.configure(selectbackground="#c4c4c4")
        READONLY = 'readonly'
        self.MCXMLSrcFldr.configure(state=READONLY)

        self.lblPSSheetDestFldr = Label(top)
        self.lblPSSheetDestFldr.place(relx=0.03, rely=0.15, height=28, width=205)
        self.lblPSSheetDestFldr.configure(activebackground="#f9f9f9")
        self.lblPSSheetDestFldr.configure(anchor=W)
        self.lblPSSheetDestFldr.configure(text='''Planeshift scores destination folder''')

        self.PSSheetDestFldr = Entry(top)
        self.PSSheetDestFldr.place(relx=0.03, rely=0.2, relheight=0.06
                                   , relwidth=0.67)
        self.PSSheetDestFldr.configure(background="white")
        self.PSSheetDestFldr.configure(font="TkFixedFont")
        self.PSSheetDestFldr.configure(selectbackground="#c4c4c4")
        READONLY = 'readonly'
        self.PSSheetDestFldr.configure(state=READONLY)

        self.lblMCXMLSrcFldr = Label(top)
        self.lblMCXMLSrcFldr.place(relx=0.03, rely=0.04, height=28, width=225)
        self.lblMCXMLSrcFldr.configure(activebackground="#f9f9f9")
        self.lblMCXMLSrcFldr.configure(anchor=W)
        self.lblMCXMLSrcFldr.configure(text='''Musescore MusicXML export directory''')
        self.lblMCXMLSrcFldr.configure(width=225)

        self.btnPSDestFldr = Button(top)
        self.btnPSDestFldr.place(relx=0.73, rely=0.2, height=36, width=133)
        self.btnPSDestFldr.configure(activebackground="#d9d9d9")
        self.btnPSDestFldr.configure(text='''Browse''')

        self.btnMCSrcFldr = Button(top)
        self.btnMCSrcFldr.place(relx=0.73, rely=0.09, height=36, width=133)
        self.btnMCSrcFldr.configure(activebackground="#d9d9d9")
        self.btnMCSrcFldr.configure(text='''Browse''')

        # converter section controls
        self.lblTitlConverter = Label(top)
        self.lblTitlConverter.place(relx=0.03, rely=0.26, height=28, width=225)
        self.lblTitlConverter.configure(activebackground="#f9f9f9")
        self.lblTitlConverter.configure(anchor=W)
        self.lblTitlConverter.configure(font=font11)
        self.lblTitlConverter.configure(text='''Converter:''')

        self.endSrcFile = Entry(top)
        self.endSrcFile.place(relx=0.03, rely=0.35, relheight=0.06
                              , relwidth=0.67)
        self.endSrcFile.configure(background="white")
        self.endSrcFile.configure(font="TkFixedFont")
        self.endSrcFile.configure(width=386)

        self.endDestFile = Entry(top)
        self.endDestFile.place(relx=0.03, rely=0.47, relheight=0.06
                               , relwidth=0.67)
        self.endDestFile.configure(background="white")
        self.endDestFile.configure(font="TkFixedFont")
        self.endDestFile.configure(selectbackground="#c4c4c4")

        self.Label1 = Label(top)
        self.Label1.place(relx=0.03, rely=0.43, height=28, width=205)
        self.Label1.configure(anchor=W)
        self.Label1.configure(text='''Destination File''')
        self.Label1.configure(width=205)

        self.Label2 = Label(top)
        self.Label2.place(relx=0.03, rely=0.3, height=28, width=205)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor=W)
        self.Label2.configure(text='''Source File''')

        self.btnSrcFile = Button(top)
        self.btnSrcFile.place(relx=0.73, rely=0.35, height=36, width=133)
        self.btnSrcFile.configure(activebackground="#d9d9d9")
        self.btnSrcFile.configure(text='''Browse''')
        self.btnSrcFile.configure(width=133)
        self.btnSrcFile.configure(command=self.browseSrcFile)

        self.btnDestFile = Button(top)
        self.btnDestFile.place(relx=0.73, rely=0.48, height=36, width=133)
        self.btnDestFile.configure(activebackground="#d9d9d9")
        self.btnDestFile.configure(text='''Browse''')
        self.btnDestFile.configure(command=self.browseDestFile)

        self.btnConvXML = Button(top)
        self.btnConvXML.place(relx=0.03, rely=0.6, height=66, width=538)
        self.btnConvXML.configure(activebackground="#d9d9d9")
        self.btnConvXML.configure(text='''ConvertXML''')
        self.btnConvXML.configure(width=534)
        self.btnConvXML.configure(command=self.convertXMLButtonAction)

        self.statusMsg = tkst.ScrolledText(top)
        self.statusMsg.place(relx=0.03, rely=0.73, relheight=0.23, relwidth=0.93)
        self.statusMsg.insert(END, '''Status message of conversion will appear here''')
        self.statusMsg.configure(width=534)
        self.statusMsg.configure(state=DISABLED)

    def browseSrcFile(self):
        filename = tkfd.askopenfilename(initialdir=self.MusecoreScoresFolder, filetypes=(("XML Files", "*.xml"),
                                                                                         ("All Files", "*.*")))
        self.endSrcFile.delete(0, END)
        self.endSrcFile.insert(0, filename)

    def browseDestFile(self):
        filename = tkfd.asksaveasfilename(initialdir=self.PlaneShiftScoresFolder, filetypes=(("XML Files", "*.xml"),
                                                                                             ("All Files", "*.*")))
        self.endDestFile.delete(0, END)
        self.endDestFile.insert(0, filename)

    def convertXMLButtonAction(self):
        srcFilename = self.endSrcFile.get()
        destFilename = self.endDestFile.get()

        try:
            convXML = self._converter.convertXML(srcFilename)
        except RuntimeError as e:
            self.populateStatusMsgBox("Error occured while processing the input file. Exited with '{}'".format(e))
        # used for debug purposes
        # print(convXML)

        try:
            with open(destFilename, "wb") as text_file:
                text_file.write(convXML)
                self.populateStatusMsgBox("File written out successfully to '{}'".format(destFilename))
        except (OSError, IOError) as e:
            self.populateStatusMsgBox("Your file could not be written to, your exception details are: {}".format(e))

    def populateStatusMsgBox(self, msg):
        # set the response menssage
        self.statusMsg.configure(state=NORMAL)
        self.statusMsg.delete(1.0, END)
        self.statusMsg.insert(END, msg)
        self.statusMsg.configure(state=DISABLED)


if __name__ == '__main__':
    vp_start_gui()
