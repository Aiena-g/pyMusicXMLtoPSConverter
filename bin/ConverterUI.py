#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Sep 16, 2017 11:10:01 PM
import sys

try:
    from Tkinter import *
    from Tkinter import filedialog as tkfd
    import Tkinter.scrolledtext as tkst
    import subprocess
except ImportError:
    from tkinter import *
    from tkinter import filedialog as tkfd
    import tkinter.scrolledtext as tkst
    import subprocess

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import ConverterUI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Musescore_Music_XML_to_PlaneShift_XML_Converter (root)
    ConverterUI_support.init(root, top)
    root.mainloop()

w = None
def create_Musescore_Music_XML_to_PlaneShift_XML_Converter(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Musescore_Music_XML_to_PlaneShift_XML_Converter (w)
    ConverterUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Musescore_Music_XML_to_PlaneShift_XML_Converter():
    global w
    w.destroy()
    w = None


class Musescore_Music_XML_to_PlaneShift_XML_Converter:
    
    def __init__(self, top=None):
        
        #DEFINE SOME USEFUL VARIABLES FOR THE APPLICATION
        '''
        NOTE:
        Please use absolute paths for these No "./path/foo/" OR "~/path/foo/" or just "foo"
        '''
        # the directory where you keep your scores in XML exported from musescore
        self.MusecoreScoresFolder = "/home/aiena/Documents/MuseScore2/Scores/"
        # the directory where you waqnt to export the PS converted XML scores (usually .PlaneShift)
        self.PlaneShiftScoresFolder = "/home/aiena/.PlaneShift/musicalsheets/"
        
        
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("577x560+830+230")
        top.title("Musescore -> Planeshift -- Music XML Converter")



        self.entSrcFile = Entry(top)
        self.entSrcFile.place(relx=0.03, rely=0.14, relheight=0.12
                , relwidth=0.67)
        self.entSrcFile.configure(background="white")
        self.entSrcFile.configure(font="TkFixedFont")
        self.entSrcFile.configure(width=386)

        self.entDestFile = Entry(top)
        self.entDestFile.place(relx=0.03, rely=0.39, relheight=0.12
                , relwidth=0.67)
        self.entDestFile.configure(background="white")
        self.entDestFile.configure(font="TkFixedFont")
        self.entDestFile.configure(selectbackground="#c4c4c4")

        self.Label1 = Label(top)
        self.Label1.place(relx=0.03, rely=0.31, height=28, width=205)
        self.Label1.configure(anchor=W)
        self.Label1.configure(text='''Destination File''')
        self.Label1.configure(width=205)

        self.Label2 = Label(top)
        self.Label2.place(relx=0.03, rely=0.06, height=28, width=205)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor=W)
        self.Label2.configure(text='''Source File''')

        self.btnSrcFile = Button(top)
        self.btnSrcFile.place(relx=0.73, rely=0.14, height=36, width=133)
        self.btnSrcFile.configure(activebackground="#d9d9d9")
        self.btnSrcFile.configure(text='''Browse''')
        self.btnSrcFile.configure(width=133)
        self.btnSrcFile.configure(command=self.browseSrcFile)

        self.btnDestFile = Button(top)
        self.btnDestFile.place(relx=0.73, rely=0.39, height=36, width=133)
        self.btnDestFile.configure(activebackground="#d9d9d9")
        self.btnDestFile.configure(text='''Browse''')
        self.btnDestFile.configure(command=self.browseDestFile)

        self.btnConvXML = Button(top)
        self.btnConvXML.place(relx=0.19, rely=0.58, height=66, width=353)
        self.btnConvXML.configure(activebackground="#d9d9d9")
        self.btnConvXML.configure(text='''ConvertXML''')
        self.btnConvXML.configure(width=353)
        self.btnConvXML.configure(command=self.convertXML)

        self.statusMsg = tkst.ScrolledText(top)
        self.statusMsg.place(relx=0.19, rely=0.76, relheight=0.08, relwidth=0.61,height=50)
        self.statusMsg.insert(END,'''Status message of conversion will appear here''')
        self.statusMsg.configure(width=500)
        self.statusMsg.configure(state=DISABLED)

    def browseSrcFile(self):
        filename = tkfd.askopenfilename(initialdir=self.MusecoreScoresFolder, filetypes=(("XML Files","*.xml"),
                                                         ("All Files","*.*") ))
        self.entSrcFile.delete(0,END)
        self.entSrcFile.insert(0,filename)

    def browseDestFile(self):
        filename = tkfd.asksaveasfilename(initialdir=self.PlaneShiftScoresFolder,filetypes=(("XML Files","*.xml"),
                                                         ("All Files","*.*") ))
        self.entDestFile.delete(0,END)
        self.entDestFile.insert(0,filename)
        
    def convertXML(self):
        srcFilename = self.entSrcFile.get()
        destFilename = self.entDestFile.get()
        
        # get the scripts path
        import os
        dn = os.path.dirname(os.path.realpath(__file__))
        
        p = subprocess.Popen(["php", os.path.join(dn,"musicXMLtoPS_XML.php"),srcFilename, destFilename], stdout=subprocess.PIPE)
        # set the response menssage 
        commandOutput = p.communicate()[0]
        
        self.statusMsg.configure(state=NORMAL)
        self.statusMsg.delete(1.0, END)
        self.statusMsg.insert(END,commandOutput)
        self.statusMsg.configure(state=DISABLED)






if __name__ == '__main__':
    vp_start_gui()



